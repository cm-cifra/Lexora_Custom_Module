# sale\_custom\_addons

Odoo addon that stores custom records with fields pulled from `sale.order` (PO number and carrier), `product.product` (SKU), and additional fields: Return Date, Status, Notes and Ship Date.

This document contains a complete file structure and full code for the module. Copy the files into your Odoo `addons` directory and install the module from Apps.

---

## File structure

```
sale_custom_addons/
├── __init__.py
├── __manifest__.py
├── models/
│   ├── __init__.py
│   └── custom_record.py
├── views/
│   └── custom_record_views.xml
├── security/
│   ├── ir.model.access.csv
│   └── security.xml
└── README.md
```

---

## `__init__.py`

```python
# -*- coding: utf-8 -*-
from . import models
```

---

## `__manifest__.py`

```python
{
    "name": "Sale Custom Addons",
    "version": "16.0.1.0.0",
    "summary": "Custom records with PO number, product SKU, carrier and shipment/return metadata",
    "description": "Stores records referencing sale orders and products with fields: PO number, product SKU, carrier, return date, status, notes and ship date.",
    "author": "Generated by ChatGPT",
    "category": "Sales",
    "depends": ["sale_management", "product"],
    "data": [
        "security/security.xml",
        "security/ir.model.access.csv",
        "views/custom_record_views.xml",
    ],
    "installable": True,
    "application": False,
    "auto_install": False,
}
```

---

## `models/__init__.py`

```python
from . import custom_record
```

---

## `models/custom_record.py`

```python
# -*- coding: utf-8 -*-
from odoo import models, fields, api


class SaleCustomRecord(models.Model):
    _name = "sale.custom.record"
    _description = "Sale Custom Addon Record"
    _order = "id desc"

    name = fields.Char(string="Reference", readonly=True)

    sale_order_id = fields.Many2one(
        comodel_name="sale.order",
        string="Sale Order",
        ondelete="set null",
    )

    # PO number is read from sale.order field 'purchase_order' (common custom field name)
    po_number = fields.Char(string="PO Number", related="sale_order_id.purchase_order", store=True)

    # Carrier read from sale.order field 'x_studio_carrier' (custom Studio field)
    carrier = fields.Char(string="Carrier", related="sale_order_id.x_studio_carrier", store=True)

    product_id = fields.Many2one(
        comodel_name="product.product",
        string="Product",
        ondelete="set null",
    )

    # Product SKU / internal reference usually in product.default_code
    product_sku = fields.Char(string="Product SKU", related="product_id.default_code", store=True)

    ship_date = fields.Date(string="Ship Date")
    return_date = fields.Date(string="Return Date")

    status = fields.Selection(
        [
            ("draft", "Draft"),
            ("pending", "Pending"),
            ("shipped", "Shipped"),
            ("returned", "Returned"),
            ("cancel", "Cancelled"),
        ],
        string="Status",
        default="draft",
    )

    notes = fields.Text(string="Notes")

    created_by = fields.Many2one(comodel_name="res.users", string="Created by", default=lambda self: self.env.user)

    @api.model
    def create(self, vals):
        # create a readable name
        seq = self.env['ir.sequence'].sudo().next_by_code('sale.custom.record') if self.env['ir.sequence'].search([('code','=', 'sale.custom.record')]) else False
        if seq:
            vals['name'] = seq
        else:
            # fallback
            vals['name'] = vals.get('po_number') or vals.get('name') or 'SCR/%s' % (fields.Date.today())
        rec = super(SaleCustomRecord, self).create(vals)
        return rec

    def action_set_shipped(self):
        for r in self:
            r.status = 'shipped'
            if not r.ship_date:
                r.ship_date = fields.Date.context_today(self)

    def action_set_returned(self):
        for r in self:
            r.status = 'returned'
            if not r.return_date:
                r.return_date = fields.Date.context_today(self)
```

Notes:

* `po_number` and `carrier` are **related fields** to pull values from `sale.order`. They are stored to allow searching/sorting on the new model.
* `product_sku` is related to `product_id.default_code` (the usual internal reference for product SKU). If your SKU is stored on another field, adjust the `related` accordingly.
* On create, the code attempts to use an `ir.sequence` with code `sale.custom.record` to generate a name. If you want a sequence, you can add a data file to create it — I kept it optional for simplicity.

---

## `security/security.xml`

```xml
<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <data noupdate="1">
        <!-- Menu and groups -->
        <record id="group_sale_custom_manager" model="res.groups">
            <field name="name">Sale Custom Addons / Manager</field>
            <field name="category_id" ref="base.module_category_sales_management"/>
        </record>

        <record id="group_sale_custom_user" model="res.groups">
            <field name="name">Sale Custom Addons / User</field>
            <field name="category_id" ref="base.module_category_sales_management"/>
        </record>
    </data>
</odoo>
```

---

## `security/ir.model.access.csv`

```csv
id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_sale_custom_record_user,sale.custom.record.user,model_sale_custom_record,base.group_user,1,0,1,0
access_sale_custom_record_manager,sale.custom.record.manager,model_sale_custom_record,sale_custom_addons.group_sale_custom_manager,1,1,1,1
```

**Important**: `model_sale_custom_record` must match the `_name` value `sale.custom.record`. If your Odoo version's CSV requires different group ids, adjust accordingly.

---

## `views/custom_record_views.xml`

```xml
<?xml version="1.0" encoding="utf-8"?>
<odoo>
  <data>

    <!-- Action -->
    <record id="action_sale_custom_records" model="ir.actions.act_window">
      <field name="name">Custom Sale Records</field>
      <field name="res_model">sale.custom.record</field>
      <field name="view_mode">tree,form</field>
      <field name="help" type="html">
        <p class="o_view_nocontent_smiling_face">Create and track custom records linked to sale orders and products.</p>
      </field>
    </record>

    <!-- Menu -->
    <menuitem id="menu_sale_custom_root" name="Custom Sale" sequence="90" parent="sale.sale_menu_root"/>
    <menuitem id="menu_sale_custom_records" name="Custom Records" parent="menu_sale_custom_root" action="action_sale_custom_records"/>

    <!-- Tree view -->
    <record id="view_sale_custom_record_tree" model="ir.ui.view">
      <field name="name">sale.custom.record.tree</field>
      <field name="model">sale.custom.record</field>
      <field name="arch" type="xml">
        <tree string="Custom Records">
          <field name="name"/>
          <field name="sale_order_id"/>
          <field name="po_number"/>
          <field name="product_id"/>
          <field name="product_sku"/>
          <field name="carrier"/>
          <field name="status"/>
          <field name="ship_date"/>
          <field name="return_date"/>
        </tree>
      </field>
    </record>

    <!-- Form view -->
    <record id="view_sale_custom_record_form" model="ir.ui.view">
      <field name="name">sale.custom.record.form</field>
      <field name="model">sale.custom.record</field>
      <field name="arch" type="xml">
        <form string="Custom Record">
          <sheet>
            <group>
              <field name="name" readonly="1"/>
              <field name="sale_order_id"/>
              <field name="po_number" readonly="1"/>
              <field name="carrier" readonly="1"/>
              <field name="product_id"/>
              <field name="product_sku" readonly="1"/>
            </group>
            <group>
              <field name="status"/>
              <field name="ship_date"/>
              <field name="return_date"/>
              <field name="notes"/>
            </group>
          </sheet>
          <footer>
            <button string="Mark Shipped" type="object" name="action_set_shipped" class="btn-primary"/>
            <button string="Mark Returned" type="object" name="action_set_returned"/>
            <button string="Cancel" class="btn-default" special="cancel"/>
            <button string="Save" class="btn-primary" special="save"/>
          </footer>
        </form>
      </field>
    </record>

  </data>
</odoo>
```

---

## `README.md`

```markdown
# sale_custom_addons

## Purpose

A lightweight Odoo addon to store custom records with fields pulled from sale.orders and products: PO number, product SKU, carrier, return date, status, notes and ship date.

## Installation
1. Copy the module folder `sale_custom_addons` into your Odoo `addons` path.
2. Update app list in Odoo (Apps > Update Apps List).
3. Install `Sale Custom Addons`.

## Notes & customization
- If your sale.order custom field for PO number is not `purchase_order`, update `po_number` related definition in `models/custom_record.py`.
- If `x_studio_carrier` is not the correct field, change the related field.
- If your product SKU is stored in another field than `default_code`, update `product_sku` related accordingly.
- Consider adding a sequence record (data file) if you want autogenerated numeric references.
```

---

If you want, I can also:

* Add a `data/ir_sequence` file to generate nicer `name` values.
* Add a smart button on `sale.order` to show linked custom records.
* Make `carrier` a Many2one to a shipping/carrier model (if you have one) instead of a `Char`.
